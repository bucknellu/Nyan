<#@ template language="VB" HostSpecific="True" #>
<#@ output extension="vb" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="ModelTypeNamespace" #>
<#@ parameter type="System.String" name="ODataModificationMessage" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet(Of System.String)" name="RequiredNamespaces" #>
<#
Dim routePrefix As String = "odata/" + ControllerRootName
#>
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Linq
Imports System.Net
Imports System.Net.Http
<# If (UseAsync) Then #>
Imports System.Threading.Tasks
<# End If #>
Imports System.Web.Http
Imports System.Web.Http.ModelBinding
Imports System.Web.Http.OData
Imports System.Web.Http.OData.Routing
<# For Each namespaceName As String In RequiredNamespaces  #>
Imports <#= namespaceName #>
<# Next #>

Namespace <#= Namespace #>
<#
    Dim entitySetName = ModelMetadata.EntitySetName
    Dim fullModelTypeName = ModelTypeNamespace + "." + ModelTypeName
    Dim entitySetVariable = ModelMetadata.EntitySetName.ToLowerInvariant()
    Dim primaryKeyName = ModelMetadata.PrimaryKeys(0).PropertyName
    Dim primaryKeyShortTypeName = ModelMetadata.PrimaryKeys(0).ShortTypeName
    Dim primaryKeyDefaultValue = ModelMetadata.PrimaryKeys(0).DefaultValue
    Dim primaryKeyType = ModelMetadata.PrimaryKeys(0).TypeName
    Dim primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys(0).IsAutoGenerated
#>
<# If (Not String.IsNullOrEmpty(ODataModificationMessage)) Then #>

    '<#= ODataModificationMessage #>

    'Imports System.Web.Http.OData.Builder
<# If (Not String.IsNullOrEmpty(ModelTypeNamespace)) Then #>
    'Imports <#= ModelTypeNamespace #>
<# End If #>
    'Dim builder As New ODataConventionModelBuilder
    'builder.EntitySet(Of <#= ModelTypeName #>)("<#= ControllerRootName #>")
<#
Dim encounteredTypes As New HashSet(Of String)
encounteredTypes.Add(fullModelTypeName)
For Each modelProperty As PropertyMetadata In ModelMetadata.Properties
    If (modelProperty.IsAssociation) AndAlso encounteredTypes.Add(modelProperty.TypeName) Then 
#>
    'builder.EntitySet(Of <#= modelProperty.ShortTypeName #>)("<#= GetEntitySetName(modelProperty) #>")
<#	End If
Next
#>
    'config.Routes.MapODataRoute("odata", "odata", builder.GetEdmModel())
<# End If #>

    Public Class <#= ControllerName #>
        Inherits ODataController

        Private db As New <#= ContextTypeName #>

        ' GET <#= routePrefix #>
        <Queryable>
        Function Get<#= ControllerRootName #>() As IQueryable(Of <#= ModelTypeName #>)
            Return db.<#= entitySetName #>
        End Function

        ' GET <#= routePrefix #>(5)
        <Queryable>
        Function Get<#= ModelTypeName #>(<FromODataUri> key As <#= primaryKeyShortTypeName #>) As SingleResult(Of <#= ModelTypeName #>)
            Return SingleResult.Create(db.<#= entitySetName #>.Where(Function(<#= ModelVariable #>) <#= ModelVariable #>.<#= primaryKeyName #> = key))
        End Function

        ' PUT <#= routePrefix #>(5)
<# If (UseAsync) Then #>
        Async Function Put(ByVal key As <#= primaryKeyShortTypeName #>, ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Put(ByVal key As <#= primaryKeyShortTypeName #>, ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As IHttpActionResult
<# End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If

            If Not key = <#= ModelVariable #>.<#= primaryKeyName #> Then
                Return BadRequest()
            End If

            db.Entry(<#= ModelVariable #>).State = EntityState.Modified

            Try
<# If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<# Else #>
                db.SaveChanges()
<# End If #>
            Catch ex As DbUpdateConcurrencyException
                If Not (<#= ModelTypeName #>Exists(key)) Then
                    Return NotFound()
                Else
                    Throw
                End If
            End Try

            Return Updated(<#= ModelVariable #>)
        End Function

        ' POST <#= routePrefix #>
<# If (UseAsync) Then #>
        Async Function Post(ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Post(ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As IHttpActionResult
<# End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If
                            
            db.<#= entitySetName #>.Add(<#= ModelVariable #>)
<# If (primaryKeyIsAutoGenerated) Then #>
<#		If (UseAsync) Then #>
            Await db.SaveChangesAsync()
<#		Else #>
            db.SaveChanges()
<#		End If #>
<# Else #>

            Try
<#		If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<#		Else #>
                db.SaveChanges()
<#		End If #>
            Catch ex As DbUpdateException
                If (<#= ModelTypeName #>Exists(<#= ModelVariable #>.<#= primaryKeyName #>)) Then
                    Return Conflict()
                Else
                    Throw
                End If
            End Try
<# End If #>

            Return Created(<#= ModelVariable #>)
        End Function

        ' PATCH <#= routePrefix #>(5)
        <AcceptVerbs("PATCH", "MERGE")>
<#		If (UseAsync) Then #>
        Async Function Patch(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>, ByVal patchValue As Delta(Of <#= ModelTypeName #>)) As Task(Of IHttpActionResult)
<#		Else #>
        Function Patch(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>, ByVal patchValue As Delta(Of <#= ModelTypeName #>)) As IHttpActionResult
<#		End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If

<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = await db.<#= entitySetName #>.FindAsync(key)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(key)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return NotFound()
            End If

            patchValue.Patch(<#= ModelVariable #>)

            Try
<# If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<# Else #>
                db.SaveChanges()
<# End If #>
            Catch ex As DbUpdateConcurrencyException
                If Not (<#= ModelTypeName #>Exists(key)) Then
                    Return NotFound()
                Else
                    Throw
                End If
            End Try

            Return Updated(<#= ModelVariable #>)
        End Function

        ' DELETE <#= routePrefix #>(5)
<# If (UseAsync) Then #>
        Async Function Delete(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Delete(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As IHttpActionResult
<# End If #>
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(key)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(key)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return NotFound()
            End If

            db.<#= entitySetName #>.Remove(<#= ModelVariable #>)
<#		If (UseAsync) Then #>
            Await db.SaveChangesAsync()
<#		Else #>
            db.SaveChanges()
<#		End If #>

            Return StatusCode(HttpStatusCode.NoContent)
        End Function

<# For Each modelProperty As PropertyMetadata In ModelMetadata.Properties #>
<#	If (modelProperty.IsAssociation) Then
    Dim isSingleResult = (modelProperty.AssociationDirection = AssociationDirection.OneToOne OrElse modelProperty.AssociationDirection = AssociationDirection.ManyToOne)
#>
        ' GET <#= routePrefix #>(5)/<#= modelProperty.PropertyName #>
        <Queryable>
<# If (isSingleResult) Then #>
        Function Get<#= modelProperty.PropertyName #>(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As SingleResult(Of <#= modelProperty.ShortTypeName #>)
<# Else #>
        Function Get<#= modelProperty.PropertyName #>(<FromODataUri> ByVal key As <#= primaryKeyShortTypeName #>) As IQueryable(Of <#= modelProperty.ShortTypeName #>)
<# End If
   If (isSingleResult) Then #>
            Return SingleResult.Create(db.<#= entitySetName #>.Where(Function(m) m.<#= primaryKeyName #> = key).Select(Function(m) m.<#= modelProperty.PropertyName #>))
<# Else #>
            Return db.<#= entitySetName #>.Where(Function(m) m.<#= primaryKeyName #> = key).SelectMany(Function(m) m.<#= modelProperty.PropertyName #>)
<# End If #>
        End Function

<# End If #>
<# Next #>
        Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            If (disposing) Then
                db.Dispose()
            End If
            MyBase.Dispose(disposing)
        End Sub

        Private Function <#= ModelTypeName #>Exists(ByVal key As <#= primaryKeyShortTypeName #>) As Boolean
            Return db.<#= entitySetName #>.Count(Function(e) e.<#= primaryKeyName #> = key) > 0
        End Function
    End Class
End Namespace
<#+
    Function GetRelatedModelMetadata(ByVal modelProperty As PropertyMetadata) As RelatedModelMetadata
        Dim propertyModel As RelatedModelMetadata = Nothing
        Dim relatedProperties As IDictionary(Of String, RelatedModelMetadata)
        If (ModelMetadata.RelatedEntities IsNot Nothing) Then
            relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(Function(item) item.AssociationPropertyName)
        Else
            relatedProperties = New Dictionary(Of String, RelatedModelMetadata)
        End If
        relatedProperties.TryGetValue(modelProperty.PropertyName, propertyModel)

        Return propertyModel
    End Function

    Function GetEntitySetName(ByVal modelProperty As PropertyMetadata) As String
        Dim propertyModel As RelatedModelMetadata = GetRelatedModelMetadata(modelProperty)
        Return If((propertyModel IsNot Nothing), propertyModel.EntitySetName, modelProperty.ShortTypeName)
    End Function
#>