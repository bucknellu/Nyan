<#@ template language="VB" HostSpecific="True" #>
<#@ output extension="vb" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet(Of System.String)" name="RequiredNamespaces" #>
Imports System
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Entity
Imports System.Linq
<# If (UseAsync) Then #>
Imports System.Threading.Tasks
<# End If #>
Imports System.Net
Imports System.Web
Imports System.Web.Mvc
<# For Each namespaceName As String In RequiredNamespaces  #>
Imports <#= namespaceName #>
<# Next #>
<#
    Dim routePrefix As String = String.Empty
    If Not String.IsNullOrEmpty(AreaName) Then
        routePrefix = "/" + AreaName
    End If
    routePrefix = routePrefix + "/" + ControllerRootName + "/"
    Dim entitySetName = ModelMetadata.EntitySetName
    Dim entitySetVariable = ModelMetadata.EntitySetName.ToLowerInvariant()
    Dim primaryKeyName = ModelMetadata.PrimaryKeys(0).PropertyName
    Dim primaryKeyShortTypeName = ModelMetadata.PrimaryKeys(0).ShortTypeName
    Dim primaryKeyDefaultValue = ModelMetadata.PrimaryKeys(0).DefaultValue
    Dim primaryKeyType = ModelMetadata.PrimaryKeys(0).TypeName
    Dim primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName)
    Dim primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys(0).IsAutoGenerated
    Dim lambdaVar = ModelVariable(0)
    Dim relatedProperties As IDictionary(Of String, RelatedModelMetadata) = ModelMetadata.RelatedEntities.ToDictionary(Function(item) item.AssociationPropertyName)

    Dim bindAttribute As String
    If (IsOverpostingProtectionRequired) Then
        bindAttribute = String.Format("<Bind(Include := ""{0}"")> ", BindAttributeIncludeText)
    Else
        bindAttribute = String.Empty
    End If
#>

Namespace <#= Namespace #>
    Public Class <#= ControllerName #>
        Inherits System.Web.Mvc.Controller

        Private db As New <#= ContextTypeName #>

        ' GET: <#= routePrefix #>
<# If (UseAsync) Then #>
        Async Function Index() As Task(Of ActionResult)
<# Else #>
        Function Index() As ActionResult
<# End If #>
<#	Dim includeExpressions As String = ""
    includeExpressions = String.Join("", relatedProperties.Values.Select(Function(propertyModel) String.Format(".Include(Function({0}) {0}.{1})", lambdaVar, propertyModel.AssociationPropertyName)))
#>
<# If (Not String.IsNullOrEmpty(includeExpressions)) Then #>
            Dim <#= entitySetVariable #> = db.<#= entitySetName #><#= includeExpressions #>
<#		If (UseAsync) Then #>
            Return View(Await <#= entitySetVariable #>.ToListAsync())
<#		Else #>
            Return View(<#= entitySetVariable #>.ToList())
<#		End If #>
<# Else #>
<#		If (UseAsync) Then #>
            Return View(Await db.<#= entitySetName #><#= includeExpressions #>.ToListAsync())
<#		Else #>
            Return View(db.<#= entitySetName #><#= includeExpressions #>.ToList())
<#		End If #>
<# End If #>
        End Function

        ' GET: <#= routePrefix #>Details/5
<# If (UseAsync) Then #>
        Async Function Details(ByVal id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Details(ByVal id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
            If IsNothing(id) Then
                Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
            End If
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(id)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(id)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return HttpNotFound()
            End If
            Return View(<#= ModelVariable #>)
        End Function

        ' GET: <#= routePrefix #>Create
        Function Create() As ActionResult
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
            ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(db.<#= propertyModel.EntitySetName #>, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>")
<# Next #>
            Return View()
        End Function

        ' POST: <#= routePrefix #>Create
<#	If (IsOverpostingProtectionRequired) Then #>
<#		For Each line As String In OverpostingWarningMessage.Split(New string() { Environment.NewLine }, StringSplitOptions.None) #>
        '<#= line #>
<#		Next #>
<#	End If #>
        <HttpPost()>
        <ValidateAntiForgeryToken()>
<# If (UseAsync) Then #>
        Async Function Create(<#= bindAttribute #>ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Create(<#= bindAttribute #>ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As ActionResult
<# End If #>
            If ModelState.IsValid Then
<# If Not String.IsNullOrEmpty(primaryKeyType) AndAlso String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase) Then #>
                <#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid()
<# End If #>
                db.<#= entitySetName #>.Add(<#= ModelVariable #>)
<# If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<# Else #>
                db.SaveChanges()
<# End If #>
                Return RedirectToAction("Index")
            End If 
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
            ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(db.<#= propertyModel.EntitySetName #>, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>", <#= ModelVariable #>.<#= propertyModel.ForeignKeyPropertyNames(0) #>)
<# Next #>
            Return View(<#= ModelVariable #>)
        End Function

        ' GET: <#= routePrefix #>Edit/5
<# If (UseAsync) Then #>
        Async Function Edit(ByVal id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Edit(ByVal id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
            If IsNothing(id) Then
                Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
            End If
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(id)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(id)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return HttpNotFound()
            End If
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
            ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(db.<#= propertyModel.EntitySetName #>, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>", <#= ModelVariable #>.<#= propertyModel.ForeignKeyPropertyNames(0) #>)
<# Next #>
            Return View(<#= ModelVariable #>)
        End Function

        ' POST: <#= routePrefix #>Edit/5
<#	If (IsOverpostingProtectionRequired) Then #>
<#		For Each line As String In OverpostingWarningMessage.Split(New string() { Environment.NewLine }, StringSplitOptions.None) #>
        '<#= line #>
<#		Next #>
<#	End If #>
        <HttpPost()>
        <ValidateAntiForgeryToken()>
<# If (UseAsync) Then #>
        Async Function Edit(<#= bindAttribute #>ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Edit(<#= bindAttribute #>ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As ActionResult
<# End If #>
            If ModelState.IsValid Then
                db.Entry(<#= ModelVariable #>).State = EntityState.Modified
<# If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<# Else #>
                db.SaveChanges()
<# End If #>
                Return RedirectToAction("Index")
            End If
<# For Each propertyModel As RelatedModelMetadata In relatedProperties.Values #>
            ViewBag.<#= propertyModel.ForeignKeyPropertyNames(0) #> = New SelectList(db.<#= propertyModel.EntitySetName #>, "<#= propertyModel.PrimaryKeyNames(0) #>", "<#= propertyModel.DisplayPropertyName #>", <#= ModelVariable #>.<#= propertyModel.ForeignKeyPropertyNames(0) #>)
<# Next #>
            Return View(<#= ModelVariable #>)
        End Function

        ' GET: <#= routePrefix #>Delete/5
<# If (UseAsync) Then #>
        Async Function Delete(ByVal id As <#= primaryKeyNullableTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function Delete(ByVal id As <#= primaryKeyNullableTypeName #>) As ActionResult
<# End If #>
            If IsNothing(id) Then
                Return New HttpStatusCodeResult(HttpStatusCode.BadRequest)
            End If
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(id)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(id)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return HttpNotFound()
            End If
            Return View(<#= ModelVariable #>)
        End Function

        ' POST: <#= routePrefix #>Delete/5
        <HttpPost()>
        <ActionName("Delete")>
        <ValidateAntiForgeryToken()>
<# If (UseAsync) Then #>
        Async Function DeleteConfirmed(ByVal id As <#= primaryKeyShortTypeName #>) As Task(Of ActionResult)
<# Else #>
        Function DeleteConfirmed(ByVal id As <#= primaryKeyShortTypeName #>) As ActionResult
<# End If #>
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(id)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(id)
<# End If #>
            db.<#= entitySetName #>.Remove(<#= ModelVariable #>)
<# If (UseAsync) Then #>
            Await db.SaveChangesAsync()
<# Else #>
            db.SaveChanges()
<# End If #>
            Return RedirectToAction("Index")
        End Function

        Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            If (disposing) Then
                db.Dispose()
            End If
            MyBase.Dispose(disposing)
        End Sub
    End Class
End Namespace
<#+
' This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
' sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    Function GetNullableTypeName(ByVal typeNameString As String, ByVal shortTypeName As String) As String
        ' The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        ' In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Dim primaryKeyType As Type = Nothing
        Try
            primaryKeyType = Type.GetType(typeNameString)
        Catch
        End Try
        If (primaryKeyType IsNot Nothing) AndAlso (primaryKeyType.IsPrimitive OrElse IsGuid(typeNameString)) Then
            Return shortTypeName + "?"
        End If
        Return shortTypeName
    End Function

    Function IsGuid(ByVal typeNameString As String) As Boolean
        Return String.Equals("System.Guid", typeNameString, StringComparison.OrdinalIgnoreCase)
    End Function
#>