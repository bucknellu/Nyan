<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
var routePrefix = "api/" + ControllerRootName;
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.Description;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVariable = ModelMetadata.EntitySetName.ToLowerInvariant();
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
    public class <#= ControllerName #> : ApiController
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        // GET <#= routePrefix #>
        public IQueryable<<#= ModelTypeName #>> Get<#= entitySetName #>()
        {
            return db.<#= entitySetName #>;
        }

        // GET <#= routePrefix #>/5
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Get<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

            return Ok(<#= ModelVariable #>);
        }

        // PUT <#= routePrefix #>/5
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != <#= ModelVariable #>.<#= primaryKeyName #>)
            {
                return BadRequest();
            }

            db.Entry(<#= ModelVariable #>).State = EntityState.Modified;

            try
            {
<# if (UseAsync) { #>
                await db.SaveChangesAsync();
<# } else { #>
                db.SaveChanges();
<# } #>
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!<#= ModelTypeName #>Exists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST <#= routePrefix #>
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            db.<#= entitySetName #>.Add(<#= ModelVariable #>);
<# if(primaryKeyIsAutoGenerated) { #>
<#		if (UseAsync) { #>
            await db.SaveChangesAsync();
<#		} else { #>
            db.SaveChanges();
<#		} #>
<# } else { #>

            try
            {
<#		if (UseAsync) { #>
                await db.SaveChangesAsync();
<#		} else { #>
                db.SaveChanges();
<#		} #>
            }
            catch (DbUpdateException)
            {
                if (<#= ModelTypeName #>Exists(<#= ModelVariable #>.<#= primaryKeyName #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }
<# } #>

            return CreatedAtRoute("DefaultApi", new { id = <#= ModelVariable #>.<#= primaryKeyName #> }, <#= ModelVariable #>);
        }

        // DELETE <#= routePrefix #>/5
        [ResponseType(typeof(<#= ModelTypeName #>))]
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

            db.<#= entitySetName #>.Remove(<#= ModelVariable #>);
<# if (UseAsync) { #>
            await db.SaveChangesAsync();
<# } else { #>
            db.SaveChanges();
<# } #>

            return Ok(<#= ModelVariable #>);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool <#= ModelTypeName #>Exists(<#= primaryKeyShortTypeName #> id)
        {
            return db.<#= entitySetName #>.Count(e => e.<#= primaryKeyName #> == id) > 0;
        }
    }
}