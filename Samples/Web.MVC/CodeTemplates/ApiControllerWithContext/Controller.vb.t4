<#@ template language="VB" Debug = "True" HostSpecific="True" #>
<#@ output extension="vb" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet(Of System.String)" name="RequiredNamespaces" #>
<#
Dim routePrefix As String = "api/" + ControllerRootName
#>
Imports System.Data
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Linq
Imports System.Net
Imports System.Net.Http
<# If (UseAsync) Then #>
Imports System.Threading.Tasks
<# End If #>
Imports System.Web.Http
Imports System.Web.Http.Description
<# For Each namespaceName As String In RequiredNamespaces  #>
Imports <#= namespaceName #>
<# Next #>
<#
    Dim entitySetName = ModelMetadata.EntitySetName
    Dim entitySetVariable = ModelMetadata.EntitySetName.ToLowerInvariant()
    Dim primaryKeyName = ModelMetadata.PrimaryKeys(0).PropertyName
    Dim primaryKeyShortTypeName = ModelMetadata.PrimaryKeys(0).ShortTypeName
    Dim primaryKeyDefaultValue = ModelMetadata.PrimaryKeys(0).DefaultValue
    Dim primaryKeyType = ModelMetadata.PrimaryKeys(0).TypeName
    Dim primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys(0).IsAutoGenerated
#>

Namespace <#= Namespace #>
    Public Class <#= ControllerName #>
        Inherits System.Web.Http.ApiController

        Private db As New <#= ContextTypeName #>

        ' GET <#= routePrefix #>
        Function Get<#= entitySetName #>() As IQueryable(Of <#= ModelTypeName #>)
            Return db.<#= entitySetName #>
        End Function

        ' GET <#= routePrefix #>/5
        <ResponseType(GetType(<#= ModelTypeName #>))>
<# If (UseAsync) Then #>
        Async Function Get<#= ModelTypeName #>(ByVal id As <#= primaryKeyShortTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Get<#= ModelTypeName #>(ByVal id As <#= primaryKeyShortTypeName #>) As IHttpActionResult
<# End If #>
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(id)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(id)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return NotFound()
            End If

            Return Ok(<#= ModelVariable #>)
        End Function

        ' PUT <#= routePrefix #>/5
<# If (UseAsync) Then #>
        Async Function Put<#= ModelTypeName #>(ByVal id As <#= primaryKeyShortTypeName #>, ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Put<#= ModelTypeName #>(ByVal id As <#= primaryKeyShortTypeName #>, ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As IHttpActionResult
<# End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If

            If Not id = <#= ModelVariable #>.<#= primaryKeyName #> Then
                Return BadRequest()
            End If

            db.Entry(<#= ModelVariable #>).State = EntityState.Modified

            Try
<# If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<# Else #>
                db.SaveChanges()
<# End If #>
            Catch ex As DbUpdateConcurrencyException
                If Not (<#= ModelTypeName #>Exists(id)) Then
                    Return NotFound()
                Else
                    Throw
                End If
            End Try

            Return StatusCode(HttpStatusCode.NoContent)
        End Function

        ' POST <#= routePrefix #>
        <ResponseType(GetType(<#= ModelTypeName #>))>
<# If (UseAsync) Then #>
        Async Function Post<#= ModelTypeName #>(ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Post<#= ModelTypeName #>(ByVal <#= ModelVariable #> As <#= ModelTypeName #>) As IHttpActionResult
<# End If #>
            If Not ModelState.IsValid Then
                Return BadRequest(ModelState)
            End If
                            
            db.<#= entitySetName #>.Add(<#= ModelVariable #>)
<# If (primaryKeyIsAutoGenerated) Then #>
<#		If (UseAsync) Then #>
            Await db.SaveChangesAsync()
<#		Else #>
            db.SaveChanges()
<#		End If #>
<# Else #>

            Try
<#		If (UseAsync) Then #>
                Await db.SaveChangesAsync()
<#		Else #>
                db.SaveChanges()
<#		End If #>
            Catch ex As DbUpdateException
                If (<#= ModelTypeName #>Exists(<#= ModelVariable #>.<#= primaryKeyName #>)) Then
                    Return Conflict()
                Else
                    Throw
                End If
            End Try
<# End If #>

            Return CreatedAtRoute("DefaultApi", New With { .id = <#= ModelVariable #>.<#= primaryKeyName #> }, <#= ModelVariable #>)
        End Function

        ' DELETE <#= routePrefix #>/5
        <ResponseType(GetType(<#= ModelTypeName #>))>
<# If (UseAsync) Then #>
        Async Function Delete<#= ModelTypeName #>(ByVal id As <#= primaryKeyShortTypeName #>) As Task(Of IHttpActionResult)
<# Else #>
        Function Delete<#= ModelTypeName #>(ByVal id As <#= primaryKeyShortTypeName #>) As IHttpActionResult
<# End If #>
<# If (UseAsync) Then #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = Await db.<#= entitySetName #>.FindAsync(id)
<# Else #>
            Dim <#= ModelVariable #> As <#= ModelTypeName #> = db.<#= entitySetName #>.Find(id)
<# End If #>
            If IsNothing(<#= ModelVariable #>) Then
                Return NotFound()
            End If

            db.<#= entitySetName #>.Remove(<#= ModelVariable #>)
<#		If (UseAsync) Then #>
            Await db.SaveChangesAsync()
<#		Else #>
            db.SaveChanges()
<#		End If #>

            Return Ok(<#= ModelVariable #>)
        End Function

        Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            If (disposing) Then
                db.Dispose()
            End If
            MyBase.Dispose(disposing)
        End Sub

        Private Function <#= ModelTypeName #>Exists(ByVal id As <#= primaryKeyShortTypeName #>) As Boolean
            Return db.<#= entitySetName #>.Count(Function(e) e.<#= primaryKeyName #> = id) > 0
        End Function
    End Class
End Namespace